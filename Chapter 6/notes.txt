C has three loop structures: "while", "for" and "do while".

A good language should provide three forms of program flow:
    - Executing a sequence of statements.
    - Repeating a sequence of statements until some condition is met (looping).
    - Using a test to decide between alternative sequences (branching).

All nonzero values are regarded as true, and only 0 is recognized as false.

In a for loop, in the specification, I can leave one or more expressoins black, but always using the semicolons:
    for (n = 3; ans <= 25; )
An empty middle control expression is considered to be true, so the loop:
    for ( ; ; )
goes on forever.
The first expression need not initialize a variable. It could, for example, be a printf() statement.

The comma operator extends the flexibility of the for loop by enabling me to include more than one initialization or update expression in a single for loop specification.
But always one test expression.
    for (a = 1, b = 2; a <= 5; a++, b += 3)
The comma operator is a sequence point.
    a++, c = a * b
It guarantees that the side effects of the left subexpression occur before the right subexpression is evaluated.

This:
    houseprice = 249, 500;
The value of the whole comma expression is the value of the right-hand expression and the left substatement assigns the value 249 to the houseprice variable.
It's equal to:
    houseprice = 249;
    500;
So, in the loop specification, if I put two test expressions, only the right-hand one would matter to test the loop.
On the other hand:
    houseprice = (249, 500);
assigns 500, the value of the right subexpression, to houseprice.

The "while" loop and the "for" loop are both entry-condition loops. The test condition is checked before each iteration of the loop. The "do while" loop is instead an exit-condition loop, guaranteeing that statements are executed at least once.

An ARRAY is a series of values of the same type stored sequentially.

The interface describes how a feature is used, which is what a function prototype does, and the implementation sets forth the particular actions taken, which is what a function definition does.