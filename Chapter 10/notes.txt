Array examples:
  - float candy[50]  // array of 50 floats
  - char code[12]  // array of 12 chars
  - int states[50]  // array of 50 ints

The brackets [] identify these as arrays.

Array initialization:
  int powers[8] = {1, 2, 4, 6, 8, 16, 32, 64}

It is a common and recommended practice to use a symbolic constant to represent the array size.

Sometimes, I might want to create a read-only array. In that case, I should use the "const" keyword when I declare and initialize the array:
  const int days[MONTHS] = {...};
This makes the program treat each element in the array as a constant.

The array members are like ordinary variables: if I don't initialize them, they might have any value.
The compiler is allowed to just use whatever values were already present at those memory locations.

Arrays created inside of a function without using the "static" keyword belong to the "automatic" storage class.

NOTE: varaibles and arrays of some others storage classes have their contents set to 0 if they are not initialized.

If I don't initialize an array at all, its elements get garbage values, but if I partially initialize an array, the remaining elements are set to 0.

I can let the compiler match the array size to the given list of items by omitting the size from the initialization:
    const int days[] = {31, 28, ...};
The compiler counts the number of items in the list and makes the array that large.

The "sizeof" operator gives the size, in bytes, of the object, or type, following it.
For example:
    sizeof days / sizeof days[0]
can be used to get the number of elements in the array:
"sizeof days" = size, in bytes, of the whole array.
"sizeof days[0]" = size, in bytes, of one element.

If I try to get the size of a type, I need to use parentheses:
    sizeof(int)

C99 added a new capability: "designated initializers". This feature allows me to pick and choose which elements are initialized.
For example, to initialize the last element in an array, I originally had to:
    int arr[6] = {0, 0, 0, 0, 0, 212};
now I can:
    int arr[6] = {[5] = 212}  // uses the index to specify the element to initialize.
Then, as with regular partial initializations, after I initialize at least one element, the uninitialized elements are set to 0.

If the code follows a designated initializer with further values, as in:
    [4] = 31, 30
these further values are used to initialize the subsequent elements (in this case, [5] = 30).
If the code initializes a particular element to a value more than once, the last initialization is the one that takes effect.

C doesn't let me assign one array to another as a unit. To assign values to an array, I can use a loop.

I have to make sure I use array indices that are within bounds: the result of using a bad index is, in the C standard, undefined.
Using out-of-bounds array indices may result in the program altering the value of other variables (especially if they are stored in memory locations adjacent to the array).

Not checking bounds allows a C program to run faster.
The compiler can't necessarily catch all index errors becasue the value of an index might not be determined until after the resulting program begins execution. To be safe, the compiler would have to add extra code to check the value of each index during runtime: that would slow things down.

Until C99, I had to use a "constant integer expression" inside [] when declaring an array size. A constant integer expression is one formed from "integer constants". a "sizeof" expression is considered an integer constant, but a "const" value isn't.
Also, the value of the expression must be greater than 0.

As of C99, C allows creating a new breed of array, called "variable-length array" (VLA for short): I can use integer variables to declare an array.

VLA's have some restrictions: for example, I can't initialize a VLA in its declaration.

Multidimensional arrays:
    float rain[5][12];
I can say that:
    - "rain" is a five-element array of 12-element arrays of float.
    - "rain[0]" is an array of 12 floats.
    - "rain[0][0]" is a float.
Internally, this kind of array is still stored sequentially.

Initializing a two-dimensional array:
    const float rain[YEARS][MONTHS] = {...}, {...}, {...}, ...
The same rules apply as one-dimensional arrays for each {}. Initialized elements, for each {}, are treated the same way. Too many values causes an error.
I can omit the interior braces and just retain the two outermost braces. As long as I have the right number of entries, the effect is the same. If I am short of entries, the array is filled sequentially; then, the remaining elements are initialized to 0.

Because the hardware instructions of computing machines rely heavily on addresses, pointers enable me to express myself in a way that is close to how the machine expresses itself. This correspondence makes programs with efficient.
In particular, pointers offer an efficient way to deal with arrays. Array notation is simply a disguised use of pointers. An example of this is that an array name is also the address of the first element of the array. If arr is an array:
    arr = &arr[0];
Both represent the memory address of that first element. Both are constants becasue they reamin fixed for the duration of the program. However, they can be assigned as values to a pointer variable.

When I say "add 1 to a pointer" C adds one "storage unit". For arrays, that means the address is increased to the address of the next element, not just the next byte. This is one of the reasons why I have to declare the sort of object to which a pointer points. The address is not enough because the computer needs to know how many bytes are used to store the object (this is true even for pointers to scalar variables, otherwise the *pt operation to fetch the value wouldn't work correctly).

The value of a pointer is the address of the object to which it points.
The address of a large object is the address of the first byte of the object (true for computers that are "byte addressable": each byte in memory is numbered sequentially).

Applying the * operator to a pointer yields the value stored in the pointed-to object.

Adding 1 to the pointer increases its value by the size, in bytes, of the pointed-to type.

I have the following equality:
  - dates + 2 == &dates[2]  // same address
  - *(dates + 2) == dates[2]  // same value

I can use a pointer to identify an individual element of an array and to obtain its value. We have two different notations for the same thing.
The C language standard describes array notation in terms of pointers.
It defines ar[n] as *(ar + n). I can think of the second expression as meaning, "Go to memory location ar, move over n units and retrieve the value there".

When writing a function that operates on an array, since the name of an array is the address of its first element, the formal parameter should be a pointer. The function will get the first element of the array and the type of object at that memory location.
This tells nothing about the number of elements in the array. I can pass the array size as a second argument (I cannot use sizeof() in the called function).

In the contenx of a function prorotype or function definition header, and only in that context. I can subsitute "*ar" with "ar[]" . It is used to remind the reader that it's a pointer to an element of an array. In function prototypes I can then have:
    int sum(int ar[], int n);  =>  int sum(int [], int);

The size of a pointer variable is how much the system uses for storing addresses.

I can pass two pointers, with the first indicating where the array starts and the second where the array ends, to know where to stop. Increase the value of the first pointer until it reaches the second pointer.
In some instances, the second pointer is made to point to the location after the final element in the array:
    arr + arrsize
This way, I can use a test for inequality (example is in file "sum_arr2.c").

C guarantees that when it allocates space for an array, a pointer to the first location after the end of the array is a valid pointer. This makes constructions such as this valid. C does not guarantee the value stored at that location. A program should not attempt to access that location.

If I do:
    total += *start++;
The unary operators * and ++ have the same precedence, but associate from right to left. This means the ++ applies to start, not *start. That is, the pointer is incremented, not the value pointed to. The use of the postfix means that the pointer is not incremented until after the pointed-to value is added to total. A clearer notation is:
    *(start++)

If I do:
    total += (*start)++;
I would use the value of start and then increment the value, not the pointer. That would leave the pointer pointing to the same element, but the element would contain a new number.
