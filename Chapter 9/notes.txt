ANSI C prototyping:
    void func(void);

A prototype specifies both the type of value a function returns and the types of arguments it expects. This information is called the "signature" of a function.

A function prototype can go inside main().

How to call a type void function:
    func();

In a function definition, a lack of semicolon tells the compiler that I am defining a function instead of calling or prototyping it.

I can omit variable names in a prototype:
int func(char, int);

Formal arguments (also called "formal parameters") are local variables private to a function. They will be assigned values each time the function is called.
They become "actual parameters": specific values are assigned to the formal parameters.
Because the called function works with data copied from the calling function, the original data in the calling function is protected from whatever manipulations the called function applies to the copies.

We call a "driver" a program designed to test functions.

The actual return value is what I would get if I assigned the indicated return value to a variable of the declared return type. This prevents from returning a type different from the declared type.

A statement like:
    return;
causes the function to terminate and return control to the calling function. Because no expression follows return, no value is returned. This form should be used only in a type void function.

In the ANSI C standard library, functions are grouped into families, each having its own header file. Header files contain, among other things, the declarations for the functions in that family.

A function declaration precedes the function definition and specifies the name, storage class and return type of a function, but not the arguments.

What happens without correct function prototypes?
The calling function places its arguments in a temporary storage area called the "stack", and the called function reads those arguments off the stack. These two processes are not coordinated with one another.
The calling function decides which type to pass based on the actual arguments in the call, and the called function reads values based on the types of its formal arguments.
If the types, number of arguments... differ, the called function reads whatever value happens to be sitting in the stack at the time. Maybe it's not occupied by correct information but by random bytes. Maybe the bytes will be interpreted in an incorrect way... (type int and type double are stored with a different number of bytes, therefore if I try to read an int from a double it truncates the double). Maybe the buffer will overflow, reading random nearing memory cells, if too many bytes are read.

In a function prototype, the variable names, if present, are dummy names and don't have to match the names use in the function definition.

Using function prototypes, if there is a mismatch with the function call and if both types are numbers, the compiler converts the values of the actual arguments to the same type as the formal arguments.

If I give a prototype like this:
        void print_name();
an ANSI C compiler will assume that I have decided to forego function prototyping and it will not check arguments. To indicate that a function really has no arguments, do:
        void print_name(void);

With functions that take a variable number of arguments, ANSI C allows for partial prototyping. For example, printf:
        int printf(const char *, ...);
This prototype says that the first arguments is a string and that there may be further arguments of an unspecified nature.

The C library, through the "stdarg.h" header file, provides a standard way for defining a function with a variable number of parameters.

C permits a function to call itself. This process is called "recursion".
Recursive solutions tend to be more elegant and less efficient than loop solutions.

Each level of recursion (function call) has its own private variables.
Statements in a recursive function that come before the recursive call are executed in the same order that the functions are called.
Statements in a recursive functoin that come after the recursive call are executed in the opposite order from which the functions are called. This feature of recursion is useful for programming problems involving reversals of order.
The code itself is not duplicated: a recursive call returns the program to the beginning of the function's instruction set. Similar to a loop.

A loop does not create new variables at each iteration, while the recursion does.

In the simplest form of recursion, the recursive call is at the end of the function, just before the return statement. This is called "tail recursion", or "end recursion". Acts like a loop.

Normally, a loop is a better choice:
First, because each recursive call gets its own set of variables, recursion uses more memory. Each recursive call places a new set or variables on the stack. Space restrictions in the stack can limit the number of recursive calls.
Second, recursion is slower because each function call takes time.