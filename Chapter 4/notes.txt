C has no special variable type for strings. Instead, strings are stored in an array of type char. Characters in a string are stored in adjacent memory cells, one character per cell, and an array consists of adjacent memory locations, so placeing a string in an array is quiet natural.
Strings in C are always stored with the terminating character '\0'.

An ARRAY is an ordered sequence of data elements of one type.

"x" is a string constant, an array of char. Consists of two characters, 'x' and '\0'.
'x' is a basic data type (char).

strlen() gives the exact number of characters (including spaces and punctuation) in the string.
sizeof operator gives a number one larger (with strings) because it also counts the null character.

C90 added a second way to create symbolic constants, by using the const keyword to convert a declaration for a variable into a declaration for a constant:
      const int MONTHS = 12
This makes MONTHS into a read-only value.
Lets me declare a type and gives me better control over which parts of a program can use the constant.

The printf() function has, as a return value, the number of characters it printed. If there is an output error, printf() returns a negative value.

If I use scanf() to read a string into a character array, don't use an &.

The scanf() function uses whitespace to decide how to devide the input into separate fields. The only exception in the %c specification, which reads the very next character, even if it's whitespace. Reads characters until it encounters a "wrong" character given the specified format. It places the first wrong character encountered back into the input stream.
It returns the number of items it successfully read.

I can use the * specifier in printf() to let the program specify the field width:
      printf("%*d", width, number)
the variable "width" will provide the field width, and "number" is the number.
With scanf(), when placed between the % and the specifier letter, it causes that function to skip over corresponding input:
      scanf("%*d %*d %d", &n)
This is "Skip two integers and copy the third into n".

I can use the field width to print out correctly-formatted columns of data.

