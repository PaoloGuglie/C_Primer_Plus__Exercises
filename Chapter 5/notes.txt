C uses the term "modifiable lvalue" to label thoe entities to which I can assing values.

The purpose of an assignment statement is to store a value at a memory location. "Data object" is a general term for a region of data storage that can be used to hold values. C uses the term "lvalue" to eamn any name or expression that identifies a particular data object. "Object" refers to the actual data storage, and lvalue is a label used to identify, or locate, that storage.
After the introduction of the const modifier, allowing me to create an object whose value cannot be changed, C added the term "modifiable lvalue" to identify an object whose value can be changed.
The term "rvalue" refers to quantities that can be assigned to modifiable lvalues but which are not themselves lvalues.

Integer division yields an integer answer. In C, any fraction resulting from integer division is discarded. This process is called "truncation".

C has a typedef mechanism that lets me create an alias for an existing type.
    typedef double real;
makes real another name for double. I can do "real deal" and make deal a type double variable.

The increment and decrement operators have a very high precedence of association.

    printf("%d %d", num, num * num++);
In C, the compiler can choose which arguments in a function to evaluate first. This freedom increases compiler efficiency, but can cause trouble if I use an increment operator on a function argument.
The solution is to NOT use an increment or decrement operator on a variable that is part of more than one argument of a function or that appears more than once in an expression.

An EXPRESSION consists of a combination of operators and operands.

Every C expression has a value. The assignment expressions have the same value that the variable to the left of the = sign receives.

In C, statements are indicated by a semicolon at the end.

A "side effect" is the modification of a data object or file. Example:
    states = 50;
the side effect is to set the states variable to 50. This looks like the main intent! But, from the standpoint of C, the main intent is evaluating expressions. In this case, the expression evaluates to 50.
Evaluating that expression has the side effect of changing the states variable to 50.
When I call printf(), the fact that it displays information is a side effect: the value of printf() is the number of items displayed.

A "sequence point" is a point in program execution at which all side effects are evaluatd before going on to the next step. In C, the semicolon in a statement marks a sequence point. All changes take place befor ea program procedes to the next statement. The end of an expression is a sequence point.

A "compound statement" is two or more statements grouped together by enclosing them in braces. It is also called a BLOCK.

When appearing in an expression, char and short, both signed and unsigned, are automatically converted to int or, if necessary, unsigned int.

In any operation involving two types, both value are converted to the higher ranking of the two types.

When passed as function arguments, char and short are converted to int, and float is converted to double. This automatic promotion is overridden by function prototyping.

Demotions, in which values are converted to lower-ranking types, can cause problems.

A "cast" consists of preceding the quantity with the name of the desired type in parentheses. The parentheses and type name together constitute a "cast operator":
        (int) 1.6

Arithmetic operations require operands to be of the same type, so C makes automatic conversions.

